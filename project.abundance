{
    "atomType": "Molecule",
    "name": "Linear-Pattern",
    "x": 0,
    "y": 0,
    "uniqueID": 1739925613779,
    "ioValues": [
        {
            "name": "Number",
            "ioValue": 4,
            "currentEquation": null
        },
        {
            "name": "Geometry",
            "ioValue": 10,
            "currentEquation": null
        },
        {
            "name": "distX",
            "ioValue": 10,
            "currentEquation": null
        },
        {
            "name": "distY",
            "ioValue": 10,
            "currentEquation": null
        },
        {
            "name": "distZ",
            "ioValue": 10,
            "currentEquation": null
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": 1739925623486,
            "ioValues": []
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.27976190476190477,
            "y": 0.2116991643454039,
            "uniqueID": 1739925687796,
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 10,
                    "currentEquation": null
                },
                {
                    "name": "y length",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ]
        },
        {
            "atomType": "Input",
            "name": "Number",
            "x": 0.028050000000000002,
            "y": 0.32869080779944293,
            "uniqueID": 1739926573683,
            "ioValues": [],
            "type": "number"
        },
        {
            "atomType": "Input",
            "name": "Geometry",
            "x": 0.028050000000000002,
            "y": 0.9108635097493036,
            "uniqueID": 1739926589843,
            "ioValues": [],
            "type": "geometry"
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.4901746724890829,
            "y": 0.7515151515151516,
            "uniqueID": "13895ac1-05d3-473f-8d26-118e7da2db11",
            "ioValues": [
                {
                    "name": "Shape",
                    "ioValue": 10,
                    "currentEquation": null
                },
                {
                    "name": "Number",
                    "ioValue": 4,
                    "currentEquation": null
                },
                {
                    "name": "distX",
                    "ioValue": 10,
                    "currentEquation": null
                },
                {
                    "name": "distY",
                    "ioValue": 10,
                    "currentEquation": null
                },
                {
                    "name": "distZ",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ],
            "codeVersion": 1,
            "code": "//Inputs:[Shape, Number, distX, distY, distZ];\n\n\nlet shapesArray = [];\nfor (let i = 0; i < Number; i++) {\n    let rotatedShape = await Move(Shape, distX * i, distY * i,distZ * i);\n    shapesArray.push(rotatedShape);\n}\n\nlet assembledShape = await Assembly(shapesArray)\n\nreturn assembledShape;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n    To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n    If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n    Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n    https://replicad.xyz/docs/introapp/UserGuide.html \n    Return a replicad object that includes geometry, color, tags and plane. \n\n\n    Example Code Atom:\n\n      Inputs:[shape, x];\n\n      let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n\n      return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n\n      - See more examples at _______ \n\n\n    */\n"
        },
        {
            "atomType": "Input",
            "name": "distX",
            "x": 0.028050000000000002,
            "y": 0.5,
            "uniqueID": "5aa87fec-8940-4c9a-aade-96bf3c091e0e",
            "ioValues": [],
            "type": "number"
        },
        {
            "atomType": "Input",
            "name": "distY",
            "x": 0.028050000000000002,
            "y": 0.6174698795180722,
            "uniqueID": "fb85f0d8-710e-4613-ae7d-5a2f0c75b069",
            "ioValues": [],
            "type": "number"
        },
        {
            "atomType": "Input",
            "name": "distZ",
            "x": 0.028050000000000002,
            "y": 0.7650602409638555,
            "uniqueID": "6ad4555c-4322-4179-b2a8-687c05120143",
            "ioValues": [],
            "type": "number"
        },
        {
            "atomType": "Readme",
            "name": "README",
            "x": 0.7794759825327511,
            "y": 0.2787878787878788,
            "uniqueID": "1db1e0de-e2c3-45a0-85df-f35ffb006f46",
            "ioValues": [],
            "readMeText": "Readme text here",
            "global": true
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.6091703056768559,
            "y": 0.28787878787878785,
            "uniqueID": "9199ca89-75f9-4ea4-8c98-c288e2921dcb",
            "ioValues": [
                {
                    "name": "Number",
                    "ioValue": 5,
                    "currentEquation": "5"
                },
                {
                    "name": "distX",
                    "ioValue": 15,
                    "currentEquation": "15"
                },
                {
                    "name": "distY",
                    "ioValue": 2,
                    "currentEquation": "2"
                },
                {
                    "name": "distZ",
                    "ioValue": 0,
                    "currentEquation": "0"
                }
            ],
            "codeVersion": 1,
            "code": "//Inputs:[Shape, Number, distX, distY, distZ];\n\n\nlet shapesArray = [];\nfor (let i = 0; i < Number; i++) {\n    let rotatedShape = await Move(Shape, distX * i, distY * i,distZ * i);\n    shapesArray.push(rotatedShape);\n}\n\nlet assembledShape = await Assembly(shapesArray)\n\nreturn assembledShape;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n    To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n    If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n    Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n    https://replicad.xyz/docs/introapp/UserGuide.html \n    Return a replicad object that includes geometry, color, tags and plane. \n\n\n    Example Code Atom:\n\n      Inputs:[shape, x];\n\n      let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n\n      return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n\n      - See more examples at _______ \n\n\n    */\n"
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.39847161572052403,
            "y": 0.396969696969697,
            "uniqueID": "c4c030d6-128d-48bd-bfe3-de9fecd78a16",
            "ioValues": [
                {
                    "name": "height",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ]
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": 1739925687796,
            "ap2ID": "c4c030d6-128d-48bd-bfe3-de9fecd78a16"
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "Number",
            "ap1ID": 1739926573683,
            "ap2ID": "13895ac1-05d3-473f-8d26-118e7da2db11"
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "Shape",
            "ap1ID": 1739926589843,
            "ap2ID": "13895ac1-05d3-473f-8d26-118e7da2db11"
        },
        {
            "ap1Name": "output",
            "ap2Name": "number or geometry",
            "ap1ID": "13895ac1-05d3-473f-8d26-118e7da2db11",
            "ap2ID": 1739925623486
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "distX",
            "ap1ID": "5aa87fec-8940-4c9a-aade-96bf3c091e0e",
            "ap2ID": "13895ac1-05d3-473f-8d26-118e7da2db11"
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "distY",
            "ap1ID": "fb85f0d8-710e-4613-ae7d-5a2f0c75b069",
            "ap2ID": "13895ac1-05d3-473f-8d26-118e7da2db11"
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "distZ",
            "ap1ID": "6ad4555c-4322-4179-b2a8-687c05120143",
            "ap2ID": "13895ac1-05d3-473f-8d26-118e7da2db11"
        },
        {
            "ap1Name": "output",
            "ap2Name": "geometry",
            "ap1ID": "9199ca89-75f9-4ea4-8c98-c288e2921dcb",
            "ap2ID": "1db1e0de-e2c3-45a0-85df-f35ffb006f46"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Shape",
            "ap1ID": "c4c030d6-128d-48bd-bfe3-de9fecd78a16",
            "ap2ID": "9199ca89-75f9-4ea4-8c98-c288e2921dcb"
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}